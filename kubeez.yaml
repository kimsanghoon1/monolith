--- 
apiVersion: "v1"
kind: "Service"
metadata: 
  name: "order"
  labels: 
    app: "order"
spec: 
  ports: 
    - 
      port: 8080
      targetPort: 8080
  selector: 
    app: "order"
  type: "LoadBalancer"
--- 
apiVersion: "apps/v1"
kind: "Deployment"
metadata: 
  name: "order"
  labels: 
    app: "order"
spec: 
  selector: 
    matchLabels: 
      app: "order"
  replicas: 1
  template: 
    metadata: 
      labels: 
        app: "order"
    spec: 
      containers: 
        - 
          name: "order"
          image: "jinyoung/order:stable"
          ports: 
            - 
              containerPort: 8080
          volumeMounts: []
      volumes: []
--- 
apiVersion: "apps/v1"
kind: "Deployment"
metadata: 
  name: "delivery"
  labels: 
    app: "delivery"
spec: 
  selector: 
    matchLabels: 
      app: "delivery"
  replicas: 1
  template: 
    metadata: 
      labels: 
        app: "delivery"
    spec: 
      containers: 
        - 
          name: "delivery"
          image: "jinyoung/delivery:stable"
          ports: 
            - 
              containerPort: 8080
          volumeMounts: []
          env: 
            - 
              name: "PASSWORD"
              valueFrom: 
                secretKeyRef: 
                  name: "mysql-pass"
                  key: "password"
      volumes: []
--- 
apiVersion: "v1"
kind: "Service"
metadata: 
  name: "delivery"
  labels: 
    app: "delivery"
spec: 
  ports: 
    - 
      port: 8080
      targetPort: 8080
  selector: 
    app: "delivery"
  type: "ClusterIP"
--- 
apiVersion: "extensions/v1beta1"
kind: "Ingress"
metadata: 
  name: "myapiaaaaaeaaa"
  annotations: 
    kubernetes.io/ingress.class: "nginx"
spec: 
  rules: 
    - 
      host: ""
      http: 
        paths: 
          - 
            path: "/order"
            pathType: "Prefix"
            backend: 
              serviceName: "order"
              servicePort: 8080
          - 
            path: "/delivery"
            pathType: "Prefix"
            backend: 
              serviceName: "delivery"
              servicePort: 8080
--- 
apiVersion: "v1"
kind: "Pod"
metadata: 
  name: "mysql"
  labels: 
    app: "mysql"
spec: 
  containers: 
    - 
      name: "mysql"
      image: "mysql:latest"
      ports: 
        - 
          containerPort: 3306
      volumeMounts: 
        - 
          mountPath: "/data"
          name: "filesystem"
      env: 
        - 
          name: "PASSWORD"
          valueFrom: 
            secretKeyRef: 
              name: "mysql-pass"
              key: "password"
  volumes: 
    - 
      name: "filesystem"
      persistentVolumeClaim: 
        claimName: "filesystem"
--- 
apiVersion: "v1"
kind: "Service"
metadata: 
  name: "mysql"
  labels: 
    app: "mysql"
spec: 
  ports: 
    - 
      port: 3306
      targetPort: 3306
  selector: 
    app: "mysql"
  type: "ClusterIP"
--- 
apiVersion: "v1"
kind: "PersistentVolumeClaim"
metadata: 
  name: "filesystem"
spec: 
  accessModes: 
    - "ReadWriteOnce"
  resources: 
    requests: 
      storage: "10Mi"
  storageClassName: ""
  volumeMode: "Filesystem"
  volumeName: ""
--- 
apiVersion: "v1"
kind: "Secret"
metadata: 
  name: "mysql-pass"
type: "Opaque"
data: 
  password: "YWRtaW4="
--- 
apiVersion: "v1"
kind: "Pod"
metadata: 
  name: ""
  labels: 
    app: ""
spec: 
  containers: 
    - 
      name: ""
      image: ""
      ports: 
        - 
          containerPort: 80
--- 
apiVersion: "v1"
kind: "Secret"
metadata: 
  name: ""
type: "Opaque"
data: {}
